Vagrant.configure("2") do |config|
  # Configure synced folder for compatibility with Windows
  config.vm.synced_folder ".", "/vagrant",
    type: "virtualbox",
    owner: "vagrant",
    group: "vagrant",
    mount_options: ["dmode=775,fmode=664"]

  # Enable vagrant-vbguest plugin for automatic Guest Additions installation
  if Vagrant.has_plugin?("vagrant-vbguest")
    config.vbguest.auto_update = true
    config.vbguest.iso_path = "https://download.virtualbox.org/virtualbox/7.0.20/VBox_GAs_7.0.20.iso"
  end

  # Define vm2 (Wazuh server)
  config.vm.define "vm2" do |machine|
    machine.vm.box = "bento/ubuntu-24.04"
    machine.vm.box_version = "202508.03.0"
    machine.vm.hostname = "wazuh"
    machine.vm.network "private_network", ip: "192.168.57.200"
    machine.vm.network "forwarded_port", guest: 5601, host: 5601 # For Wazuh dashboard access
    machine.vm.provider "virtualbox" do |vb|
      vb.memory = 8192
      vb.cpus = 4
      vb.gui = false
    end
    machine.vm.boot_timeout = 900
    # Ensure SSH access with Vagrant insecure key
    machine.ssh.insert_key = false
    machine.ssh.private_key_path = ["~/.vagrant.d/insecure_private_key"]
    machine.vm.provision "shell", inline: <<-SHELL
      set -e
      sudo apt-get update
      sudo apt-get install -y openssh-server linux-headers-$(uname -r) build-essential dkms gcc make perl
      # Disable insecure key and enable password authentication
      sudo sed -i 's/#PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config
      sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
      sudo sed -i 's/PermitEmptyPasswords yes/PermitEmptyPasswords no/' /etc/ssh/sshd_config
      echo 'vagrant:vagrant' | sudo chpasswd
      sudo systemctl restart ssh
      echo "vm2 provisioning completed successfully"
    SHELL
  end

  # Define vm1 (Ansible control node)
  config.vm.define "vm1" do |machine|
    machine.vm.box = "bento/ubuntu-24.04"
    machine.vm.box_version = "202508.03.0"
    machine.vm.hostname = "ansible-control"
    machine.vm.network "private_network", ip: "192.168.57.201"
    machine.vm.provider "virtualbox" do |vb|
      vb.memory = 2048
      vb.cpus = 2
      vb.gui = false
    end
    machine.vm.boot_timeout = 900
    # Ensure SSH access with Vagrant insecure key
    machine.ssh.insert_key = false
    machine.ssh.private_key_path = ["~/.vagrant.d/insecure_private_key"]
    machine.vm.provision "shell", inline: <<-SHELL
      set -e
      sudo apt-get update
      sudo apt-get install -y openssh-server linux-headers-$(uname -r) build-essential dkms gcc make perl python3 python-is-python3 python3-pip unixodbc ansible sshpass
      sudo mkdir -p /vagrant/inventory
      sudo chown -R vagrant:vagrant /vagrant
      # Disable insecure key and enable password authentication
      sudo sed -i 's/#PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config
      sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
      sudo sed -i 's/PermitEmptyPasswords yes/PermitEmptyPasswords no/' /etc/ssh/sshd_config
      echo 'vagrant:vagrant' | sudo chpasswd
      sudo systemctl restart ssh
      echo "vm1 shell provisioning completed successfully"
    SHELL
    # Ansible provisioner
    machine.vm.provision "ansible_local" do |ansible|
      ansible.playbook = "/vagrant/wazuh-ansible/playbooks/wazuh-single.yml"
      ansible.inventory_path = "/vagrant/inventory/inventory.ini"
      ansible.limit = "192.168.57.200" # Target vm2 by IP
      ansible.verbose = "vvv"
      ansible.install = false # Ansible is installed via shell provisioner
      ansible.extra_vars = {
        ansible_user: "vagrant",
        ansible_password: "vagrant"  # Use password instead of key
      }
    end
  end
end
