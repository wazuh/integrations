#!/var/ossec/framework/python/bin/python3

import json
import sys
import time
import os
import re
import requests
from socket import socket, AF_UNIX, SOCK_DGRAM

# Global vars
debug_enabled = False  # default false; enable only if 'debug' arg passed
pwd = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
now = time.strftime("%a %b %d %H:%M:%S %Z %Y")
log_file = f"{pwd}/logs/integrations.log"
socket_addr = f"{pwd}/queue/sockets/queue"


def main(args):
    debug("# Starting")

    alert_file_location = args[1]
    apikey = args[2]
    hook_url = args[3]

    debug(f"# File location: {alert_file_location}")
    debug(f"# API key: {apikey[:4]}***")
    debug(f"# Hook URL: {hook_url}")

    with open(alert_file_location) as alert_file:
        json_alert = json.load(alert_file)

    # Log if any hash is found
    hash_alert = extract_sha256_hash(json_alert)
    if hash_alert:
        log_msg = f"# Found SHA256 hash: {hash_alert}"
        log_to_file(log_msg)
        debug(log_msg)
    else:
        log_msg = "# No SHA256 hash found in alert"
        log_to_file(log_msg)
        debug(log_msg)
        return

    msg = request_malwarebazaar_info(json_alert, hash_alert, apikey, hook_url)

    if msg:
        send_event(msg, json_alert.get("agent"))


def debug(msg):
    if debug_enabled:
        timestamp = time.strftime("%a %b %d %H:%M:%S %Z %Y")
        log_msg = f"{timestamp}: {msg}\n"
        print(log_msg, end="")
        with open(log_file, "a") as f:
            f.write(log_msg)


def log_to_file(msg):
    # Logs message always, regardless of debug flag
    timestamp = time.strftime("%a %b %d %H:%M:%S %Z %Y")
    with open(log_file, "a") as f:
        f.write(f"{timestamp}: {msg}\n")


def extract_sha256_hash(alert):
    # Case 1: Sysmon style - win.eventdata.hashes
    hashes_str = alert.get("data", {}).get("win", {}).get("eventdata", {}).get("hashes", "")
    if hashes_str:
        sha256_match = re.search(r"SHA256=([A-Fa-f0-9]{64})", hashes_str)
        if sha256_match:
            debug("# Found SHA256 in win.eventdata.hashes")
            return sha256_match.group(1)

    # Case 2: FIM rules like 550, 553, 554
    rule_id = str(alert.get("rule", {}).get("id", ""))
    if rule_id in ["550", "553", "554"]:
        sha256 = alert.get("syscheck", {}).get("sha256_after")
        if sha256:
            debug("# Found SHA256 in syscheck.sha256_after")
            return sha256

    return None


def query_malwarebazaar(hash, apikey, url):
    headers = {
        "Auth-Key": apikey,
        "Content-Type": "application/x-www-form-urlencoded"
    }
    payload = {
        "query": "get_info",
        "hash": hash
    }

    try:
        response = requests.post(url, headers=headers, data=payload, timeout=10)
        response.raise_for_status()
    except requests.exceptions.HTTPError as e:
        err_msg = f"HTTP error when querying MalwareBazaar API: {e}"
        log_to_file(err_msg)
        debug(err_msg)
        return None
    except requests.exceptions.ConnectionError as e:
        err_msg = f"Connection error when querying MalwareBazaar API: {e}"
        log_to_file(err_msg)
        debug(err_msg)
        return None
    except requests.exceptions.Timeout as e:
        err_msg = f"Timeout error when querying MalwareBazaar API: {e}"
        log_to_file(err_msg)
        debug(err_msg)
        return None
    except requests.exceptions.RequestException as e:
        err_msg = f"Request error when querying MalwareBazaar API: {e}"
        log_to_file(err_msg)
        debug(err_msg)
        return None

    try:
        data = response.json()
    except json.JSONDecodeError as e:
        err_msg = f"JSON decode error from MalwareBazaar response: {e}"
        log_to_file(err_msg)
        debug(err_msg)
        return None

    if data.get("query_status") == "ok" and data.get("data"):
        return data["data"][0]
    else:
        err_msg = f"MalwareBazaar query returned no data or failed: {data.get('query_status')}"
        log_to_file(err_msg)
        debug(err_msg)
        return None


def request_malwarebazaar_info(alert, hash_alert, apikey, hook_url):
    source_data = {
        "alert_id": alert.get("id"),
        "rule": alert.get("rule", {}).get("id"),
        "description": alert.get("rule", {}).get("description"),
        "hash": hash_alert
    }

    fim_path = alert.get("syscheck", {}).get("path")
    if fim_path:
        source_data["file_path"] = fim_path

    win_eventdata = alert.get("data", {}).get("win", {}).get("eventdata", {})
    if win_eventdata:
        source_data["parent_image"] = win_eventdata.get("parentImage")
        source_data["process_id"] = win_eventdata.get("processId")
        source_data["parent_process_id"] = win_eventdata.get("parentProcessId")

    alert_output = {
        "malwarebazaar": {
            "found": 0,
            "source": source_data
        },
        "integration": "custom-malwarebazaar"
    }

    data = query_malwarebazaar(hash_alert, apikey, hook_url)
    if not data:
        return alert_output

    alert_output["malwarebazaar"]["found"] = 1
    alert_output["malwarebazaar"].update({
        "sha256": data.get("sha256_hash"),
        "sha1": data.get("sha1_hash"),
        "md5": data.get("md5_hash"),
        "imphash": data.get("imphash"),
        "ssdeep": data.get("ssdeep"),
        "file_name": data.get("file_name"),
        "file_size": data.get("file_size"),
        "file_type": data.get("file_type"),
        "mime_type": data.get("file_type_mime"),
        "signature": data.get("signature"),
        "delivery_method": data.get("delivery_method"),
        "first_seen": data.get("first_seen"),
        "last_seen": data.get("last_seen"),
        "sandbox_triage": data.get("vendor_intel", {}).get("Triage", {}).get("link"),
        "sandbox_cape": data.get("vendor_intel", {}).get("CAPE", {}).get("link"),
        "sandbox_certpl": data.get("vendor_intel", {}).get("CERT-PL_MWDB", {}).get("link"),
        "sandbox_unpacme": (data.get("vendor_intel", {}).get("UnpacMe") or [{}])[0].get("link"),
        "reversinglabs_status": data.get("vendor_intel", {}).get("ReversingLabs", {}).get("status"),
        "reversinglabs_threat": data.get("vendor_intel", {}).get("ReversingLabs", {}).get("threat_name"),
        "reversinglabs_score": data.get("vendor_intel", {}).get("ReversingLabs", {}).get("scanner_percent"),
        "clamav_detection": (data.get("intelligence", {}).get("clamav") or [None])[0],
        "triage_score": data.get("vendor_intel", {}).get("Triage", {}).get("score")
    })

    comment = data.get("comment") or ""
    alert_output["malwarebazaar"]["c2_url"] = extract_comment_value(comment, r"http://[^\s]+")
    alert_output["malwarebazaar"]["email_from"] = extract_comment_value(comment, r"From: ([^\n]+)")
    alert_output["malwarebazaar"]["email_subject"] = extract_comment_value(comment, r"Subject: ([^\n]+)")
    alert_output["malwarebazaar"]["email_ip"] = extract_comment_value(comment, r"Sending IP: ([^\n]+)")

    debug(alert_output)
    return alert_output


def extract_comment_value(comment, regex_pattern):
    if not isinstance(comment, str):
        return None
    match = re.search(regex_pattern, comment)
    return match.group(1) if match else None


def send_event(msg, agent=None):
    if not agent or agent.get("id") == "000":
        string = f'1:malwarebazaar:{json.dumps(msg)}'
    else:
        string = f'1:[{agent["id"]}] ({agent["name"]}) {agent.get("ip", "any")}->malwarebazaar:{json.dumps(msg)}'

    debug(string)
    sock = socket(AF_UNIX, SOCK_DGRAM)
    sock.connect(socket_addr)
    sock.send(string.encode())
    sock.close()


if __name__ == "__main__":
    try:
        bad_arguments = False
        if len(sys.argv) >= 4:
            debug_enabled = (len(sys.argv) > 4 and sys.argv[4] == 'debug')
            msg = f'{now} {sys.argv[1]} {sys.argv[2]} {sys.argv[3]} {sys.argv[4] if len(sys.argv) > 4 else ""}'
        else:
            msg = f'{now} Wrong arguments'
            bad_arguments = True

        with open(log_file, 'a') as f:
            f.write(msg + '\n')

        if bad_arguments:
            log_to_file("# Exiting: Bad arguments.")
            sys.exit(1)

        main(sys.argv)

    except Exception as e:
        err = f"Exception occurred: {e}"
        log_to_file(err)
        debug(err)
        raise
